version: 2  # use CircleCI 2.0
jobs:       # a collection of steps
  build:    # runs not using Workflows must have a `build` job as entry point

    working_directory: ~/dyga-engine  # directory where steps will run

    docker:   # run the steps with Docker
      - image: circleci/openjdk:8-jdk-browsers   # ...with this image as the primary container; this is where all `steps` will run

    steps:
      # check out source code to working directory
      - checkout
      # restore the saved cache after the first run or if `pom.xml` has changed
      - restore_cache:
          key: dyga-engine-{{ checksum "pom.xml" }} # Read about caching dependencies: https://circleci.com/docs/2.0/caching/
      # Run maven commands
      - run:
          name: getDependencies
          command: mvn dependency:go-offline --projects dyga-engine-ui,dyga-engine-core  # gets the project dependencies
      # saves the project dependencies
      - save_cache:
          key: dyga-engine-{{ checksum "pom.xml" }}
          paths:
            - ~/.m2
      # run the actual tests
      - run:
          name: mavenPackage
          command: mvn package
      # uploads the test metadata from the `target/surefire-reports` directory so that it can show up in the CircleCI dashboard.
      - store_test_results:
          paths:
            - dyga-engine-ui/target/surefire-reports   # Upload test results for display in Test Summary: https://circleci.com/docs/2.0/collect-test-data/
            - dyga-engine-core/target/surefire-reports
      # store the uberjar as an artifact
      - store_artifacts:
          path: dyga-engine-core/target/dyga-core-0.2.jar    # Upload test summary for display in Artifacts: https://circleci.com/docs/2.0/artifacts/
          # See https://circleci.com/docs/2.0/deployment-integrations/ for deploy examples
      - store_artifacts:
          path: dyga-engine-ui/target/dyga-ui-0.2.jar